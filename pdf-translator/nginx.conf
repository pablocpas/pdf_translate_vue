upstream backend {
    server backend:8000;
}

upstream minio {
    server minio:9000;
}

server {
    listen 80;
    server_name _;
    client_max_body_size 50M;

    # Frontend static files
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
    }

    # API requests
    location /api/ {
        proxy_pass http://backend/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 300s;
    }

    location /minio/ {
        # Reescribe la URL para eliminar el prefijo /minio/ antes de pasarla a MinIO.
        # MinIO espera recibir la petición en su raíz (p. ej., /bucket-name/object-key).
        # El `break` es importante para detener el procesamiento de más reglas de reescritura.
        rewrite ^/minio/(.*)$ /$1 break;

        # Pasa la petición al upstream de MinIO
        proxy_pass http://minio;

        # Headers cruciales para que MinIO funcione correctamente detrás de un proxy.
        # Le dicen a MinIO cómo era la petición original del cliente.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Amz-Content-Sha256 $http_x_amz_content_sha256;
        proxy_set_header X-Amz-Date $http_x_amz_date;
        proxy_set_header Authorization $http_authorization;

        # Configuraciones para manejar correctamente las conexiones y evitar errores
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        chunked_transfer_encoding off; # Recomendado para compatibilidad con S3
    }
}